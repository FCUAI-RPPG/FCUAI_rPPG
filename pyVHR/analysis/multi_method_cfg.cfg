### DATASET ###
#
# dataset: name of the module that implement the pyVHR.datasets.Dataset class. The class and the module must have the same name!
# path: path to the module where 'dataset' is defined. If 'None' then the dataset is searched inside the package datasets dir "pyVHR/datasets/".
# videodataDIR: path to the video directory of the dataset.
# BVPdataDIR: path to the ground truth BVP of the dataset.
# videoIdx: list of video ids that will be processed in the experiment. To process all the videos use '[]'.
#
[DATASET]
dataset     = lgi_ppgi
path = None
videodataDIR= /var/datasets/VHR1/
BVPdataDIR  = /var/datasets/VHR1/
videoIdx    = []

### RGB SIGNAL ###
#
# cuda: True for using a CUDA device, False instead.
# cuda_device: which CUDA device ID to use; use 'pyVHR.utils.cuda_utils.cuda_info' for a list of your CUDA devices.
# winSize: the signal is divided into blocks/windows of size winSize (in seconds) with stride of 1 sec. ; each window will became a BPM estimate.
# tot_sec: number of seconds of the video to process; pass 0 to process the whole video.
# skin_extractor: Theese are the methods used for extracting the skin: convex-hull ('convexhull'), face-parsing ('faceparsing').
# approach: Theese are the ROI used for extracting the RGB signal: patches ('patches'), holistic ('hol').
# patches: patch can be a square ('squares') or a rectangle('rects').
# type: 'mean' for computing the RGB signal as the RGB mean of the ROI.
# landmarks_list: a list of landmarks ids (0 to 467); a landmarks is the center of a patch; in the notebooks you can find a visual plot that shows where the landmarks are located in the face.
# squares_dim: float number that represents the pixel size of the sides of the square patches.
# rects_dims: a list of float couples [x,y], where the i_Th x,y couple represent the pixel size of the x_side and y_side of the i_Th rectangular patch.
# skin_color_low_threshold: int RGB color low threshold used for extracting the skin. This means, colors below RGB [V,V,V] are excluded, where V is the chosen int value.
# skin_color_high_threshold: int RGB color high threshold used for extracting the skin. This means, colors above RGB [V,V,V] are excluded, where V is the int chosen value.
# sig_color_low_threshold: int RGB color low threshold used for extracting the signal. This means, ROI colors below RGB [V,V,V] are excluded, where V is the chosen int value.
# sig_color_high_threshold: int RGB color high threshold used for extracting the signal. This means, ROI colors above RGB [V,V,V] are excluded, where V is the chosen int value.
#
#
# SUGGESTED VALUES
#  - cuda = True
#  - cuda_device = 0
#  - winSize = 6
#  - tot_sec = 0
#  - skin_extractor = convexhull
#  - approach = patches
#  - patches = squares
#  - type = mean
#  - landmarks_list = []
#  - squares_dim = 30.0
#  - rects_dims = []
#  - skin_color_low_threshold = 75
#  - skin_color_high_threshold = 230
#  - sig_color_low_threshold = 75
#  - sig_color_high_threshold = 230
#
[SIG]
cuda = True
cuda_device = 0
winSize = 6
tot_sec = 0
skin_extractor = convexhull
approach = patches
patches = squares
type = mean
landmarks_list = [2, 3, 4, 5, 6, 8, 9, 10, 18, 21, 32, 35, 36, 43, 46, 47, 48, 50, 54, 58, 67, 68, 69, 71, 92, 93, 101, 103, 104, 108, 109, 116, 117, 118, 123, 132, 134, 135, 138, 139, 142, 148, 149, 150, 151, 152, 182, 187, 188, 193, 197, 201, 205, 206, 207, 210, 211, 212, 216, 234, 248, 251, 262, 265, 266, 273, 277, 278, 280, 284, 288, 297, 299, 322, 323, 330, 332, 333, 337, 338, 345, 346, 361, 363, 364, 367, 368, 371, 377, 379, 411, 412, 417, 421, 425, 426, 427, 430, 432, 436]
squares_dim = 30.0
rects_dims = []
skin_color_low_threshold = 75
skin_color_high_threshold = 230
sig_color_low_threshold = 75
sig_color_high_threshold = 230

### BVP ###
#
# methods: list of METHODS names. The suite uses these methods individually to calculate BVP and estimate BPM. After this all the BVP signals of the methods are combined into a single n-estimator signal, which is used to estimate a last BPM signal. 
# color_low_threshold: int RGB color low threshold used for extracting the BVP. This means, estimator's windowed-signal that has at least one value below RGB [V,V,V] is excluded, where V is the chosen int value.
# color_high_threshold: int RGB color high threshold used for extracting the BVP. This means, estimator's windowed-signal that has at least one value above RGB [V,V,V] is excluded, where V is the chosen int value.
#
# This threshold filter is only used when there are multiple estimators, so if you have chosen to use patches.
# If you don't want to lose any estimator keep this threshold range open: [0,255].
[BVP]
methods = ['CUPY_CHROM_FILTER', 'CUPY_POS_FILTER','CPU_PCA_ALL']
color_low_threshold = 75
color_high_threshold = 230

### BPM ###
# 
# type: BPM is extracted using different approaches: 'welch', 'psd_clustering'.
# minHz: float low threashold frequency (Hz). BPM is computed excluding frequencies below this threashold.
# maxHz: float high threashold frequency (Hz). BPM is computed excluding frequencies above this threashold
#
[BPM]
type = welch
minHz = 0.7
maxHz = 4.0

### METHODS ###
#
# path: 'path/to/module.py' that contains the BVP method function 'name'; 'None' to use "pyVHR.BVP.methods" methods.
# name: name of the function that implements the BVP method.
# device_type: 'cuda' if the method use cupy; 'cpu' if the method use numpy; 'torch' if the method use torch.Tensor.
# params: dict of parameters used by the method; if the method takes no parameters write {}.
# pre_filtering: list of FILTERS names.
# post_filtering: list of FILTERS names.
#
# Custom rPPG methods must comply with the function signature documented in pyVHR.BVP.methods.
#
[CUPY_CHROM_FILTER]
path = None
name = cupy_CHROM
device_type = cuda
params = {}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[TORCH_CHROM]
path = None
name = torch_CHROM
device_type = torch
params = {}
pre_filtering = []
post_filtering = []

[CPU_LGI_FILTER]
path = None
name = cpu_LGI
device_type = cpu
params = {}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CPU_LGI]
path = None
name = cpu_LGI
device_type = cpu
params = {}
pre_filtering = []
post_filtering = []

[CUPY_POS_FILTER]
path = None
name = cupy_POS
device_type = cuda
params = {'fps':'adaptive'}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CUPY_POS]
path = None
name = cupy_POS
device_type = cuda
params = {'fps':'adaptive'}
pre_filtering = []
post_filtering = []

[CPU_PBV_FILTER]
path = None
name = cpu_PBV
device_type = cpu
params = {}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CPU_PBV]
path = None
name = cpu_PBV
device_type = cpu
params = {}
pre_filtering = []
post_filtering = []

[CPU_GREEN_FILTER]
path = None
name = cpu_GREEN
device_type = cpu
params = {}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CPU_GREEN]
path = None
name = cpu_GREEN
device_type = cpu
params = {}
pre_filtering = []
post_filtering = []

[CPU_PCA_SECOND_FILTER]
path = None
name = cpu_PCA
device_type = cpu
params = {'component': 'second_comp'}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CPU_PCA_SECOND]
path = None
name = cpu_PCA
device_type = cpu
params = {'component': 'second_comp'}
pre_filtering = []
post_filtering = []

[CPU_PCA_ALL_FILTER]
path = None
name = cpu_PCA
device_type = cpu
params = {'component': 'all_comp'}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CPU_PCA_ALL]
path = None
name = cpu_PCA
device_type = cpu
params = {'component': 'all_comp'}
pre_filtering = []
post_filtering = []

[CPU_ICA_SECOND_FILTER]
path = None
name = cpu_ICA
device_type = cpu
params = {'component': 'second_comp'}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CPU_ICA_SECOND]
path = None
name = cpu_ICA
device_type = cpu
params = {'component': 'second_comp'}
pre_filtering = ['BPFILTER']
post_filtering = []

[CPU_ICA_ALL_FILTER]
path = None
name = cpu_ICA
device_type = cpu
params = {'component': 'all_comp'}
pre_filtering = ['BPFILTER']
post_filtering = ['BPFILTER']

[CPU_ICA_ALL]
path = None
name = cpu_ICA
device_type = cpu
params = {'component': 'all_comp'}
pre_filtering = ['BPFILTER']
post_filtering = []


### FILTERS ###
#
# path: 'path/to/module.py' that contains the filter method function 'name'; 'None' to use "pyVHR.BVP.filters" methods.
# name: name of the function that implements the filter method.
# params: dict of parameters used by the method; if the method takes no parameters write {}.
#
# Custom filter methods must comply with the function signature documented in pyVHR.BVP.filters.
#
[DETREND]
path = None
name = detrend
params = {'detLambda':10}

[BPFILTER]
path = None
name = BPfilter
params = {'minHz':0.7, 'maxHz':4.0, 'fps':'adaptive', 'order':6}

[ZSCORE]
path = None
name = zscore
params = {}